// @generated by protoc-gen-es v0.0.10 with parameter "target=js+dts"
// @generated from file qf/requests.proto (package qf, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {Course, Enrollment_UserStatus, EnrollmentLink, Repository_Type, Review, Submission_Status, User} from "./types_pb.js";

/**
 * @generated from message qf.CourseSubmissions
 */
export declare class CourseSubmissions extends Message<CourseSubmissions> {
  /**
   * preloaded assignments
   *
   * @generated from field: qf.Course course = 1;
   */
  course?: Course;

  /**
   * @generated from field: repeated qf.EnrollmentLink links = 2;
   */
  links: EnrollmentLink[];

  constructor(data?: PartialMessage<CourseSubmissions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.CourseSubmissions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CourseSubmissions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CourseSubmissions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CourseSubmissions;

  static equals(a: CourseSubmissions | PlainMessage<CourseSubmissions> | undefined, b: CourseSubmissions | PlainMessage<CourseSubmissions> | undefined): boolean;
}

/**
 * @generated from message qf.ReviewRequest
 */
export declare class ReviewRequest extends Message<ReviewRequest> {
  /**
   * @generated from field: uint64 courseID = 1;
   */
  courseID: bigint;

  /**
   * @generated from field: qf.Review review = 2;
   */
  review?: Review;

  constructor(data?: PartialMessage<ReviewRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.ReviewRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReviewRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReviewRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReviewRequest;

  static equals(a: ReviewRequest | PlainMessage<ReviewRequest> | undefined, b: ReviewRequest | PlainMessage<ReviewRequest> | undefined): boolean;
}

/**
 * @generated from message qf.CourseRequest
 */
export declare class CourseRequest extends Message<CourseRequest> {
  /**
   * @generated from field: uint64 courseID = 1;
   */
  courseID: bigint;

  constructor(data?: PartialMessage<CourseRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.CourseRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CourseRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CourseRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CourseRequest;

  static equals(a: CourseRequest | PlainMessage<CourseRequest> | undefined, b: CourseRequest | PlainMessage<CourseRequest> | undefined): boolean;
}

/**
 * @generated from message qf.UserRequest
 */
export declare class UserRequest extends Message<UserRequest> {
  /**
   * @generated from field: uint64 userID = 1;
   */
  userID: bigint;

  constructor(data?: PartialMessage<UserRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.UserRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserRequest;

  static equals(a: UserRequest | PlainMessage<UserRequest> | undefined, b: UserRequest | PlainMessage<UserRequest> | undefined): boolean;
}

/**
 * @generated from message qf.GetGroupRequest
 */
export declare class GetGroupRequest extends Message<GetGroupRequest> {
  /**
   * @generated from field: uint64 groupID = 1;
   */
  groupID: bigint;

  constructor(data?: PartialMessage<GetGroupRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.GetGroupRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGroupRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGroupRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGroupRequest;

  static equals(a: GetGroupRequest | PlainMessage<GetGroupRequest> | undefined, b: GetGroupRequest | PlainMessage<GetGroupRequest> | undefined): boolean;
}

/**
 * @generated from message qf.GroupRequest
 */
export declare class GroupRequest extends Message<GroupRequest> {
  /**
   * @generated from field: uint64 userID = 1;
   */
  userID: bigint;

  /**
   * @generated from field: uint64 groupID = 2;
   */
  groupID: bigint;

  /**
   * @generated from field: uint64 courseID = 3;
   */
  courseID: bigint;

  constructor(data?: PartialMessage<GroupRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.GroupRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GroupRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GroupRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GroupRequest;

  static equals(a: GroupRequest | PlainMessage<GroupRequest> | undefined, b: GroupRequest | PlainMessage<GroupRequest> | undefined): boolean;
}

/**
 * @generated from message qf.OrgRequest
 */
export declare class OrgRequest extends Message<OrgRequest> {
  /**
   * @generated from field: string orgName = 1;
   */
  orgName: string;

  constructor(data?: PartialMessage<OrgRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.OrgRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrgRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrgRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrgRequest;

  static equals(a: OrgRequest | PlainMessage<OrgRequest> | undefined, b: OrgRequest | PlainMessage<OrgRequest> | undefined): boolean;
}

/**
 * @generated from message qf.Organization
 */
export declare class Organization extends Message<Organization> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * @generated from field: string path = 2;
   */
  path: string;

  /**
   * @generated from field: string avatar = 3;
   */
  avatar: string;

  /**
   * @generated from field: string paymentPlan = 4;
   */
  paymentPlan: string;

  constructor(data?: PartialMessage<Organization>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Organization";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Organization;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Organization;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Organization;

  static equals(a: Organization | PlainMessage<Organization> | undefined, b: Organization | PlainMessage<Organization> | undefined): boolean;
}

/**
 * @generated from message qf.Organizations
 */
export declare class Organizations extends Message<Organizations> {
  /**
   * @generated from field: repeated qf.Organization organizations = 1;
   */
  organizations: Organization[];

  constructor(data?: PartialMessage<Organizations>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Organizations";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Organizations;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Organizations;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Organizations;

  static equals(a: Organizations | PlainMessage<Organizations> | undefined, b: Organizations | PlainMessage<Organizations> | undefined): boolean;
}

/**
 * @generated from message qf.Reviewers
 */
export declare class Reviewers extends Message<Reviewers> {
  /**
   * @generated from field: repeated qf.User reviewers = 1;
   */
  reviewers: User[];

  constructor(data?: PartialMessage<Reviewers>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Reviewers";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Reviewers;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Reviewers;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Reviewers;

  static equals(a: Reviewers | PlainMessage<Reviewers> | undefined, b: Reviewers | PlainMessage<Reviewers> | undefined): boolean;
}

/**
 * EnrollmentRequest is a request for enrolled users of a given course,
 * whose enrollment status match those provided in the request. To ignore group members
 * that otherwise match the enrollment request, set ignoreGroupMembers to true.
 *
 * @generated from message qf.EnrollmentRequest
 */
export declare class EnrollmentRequest extends Message<EnrollmentRequest> {
  /**
   * @generated from field: uint64 courseID = 1;
   */
  courseID: bigint;

  /**
   * @generated from field: bool ignoreGroupMembers = 2;
   */
  ignoreGroupMembers: boolean;

  /**
   * @generated from field: bool withActivity = 3;
   */
  withActivity: boolean;

  /**
   * @generated from field: repeated qf.Enrollment.UserStatus statuses = 4;
   */
  statuses: Enrollment_UserStatus[];

  constructor(data?: PartialMessage<EnrollmentRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.EnrollmentRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnrollmentRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnrollmentRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnrollmentRequest;

  static equals(a: EnrollmentRequest | PlainMessage<EnrollmentRequest> | undefined, b: EnrollmentRequest | PlainMessage<EnrollmentRequest> | undefined): boolean;
}

/**
 * EnrollmentStatusRequest is a request for a given user, with a specific enrollment status.
 *
 * @generated from message qf.EnrollmentStatusRequest
 */
export declare class EnrollmentStatusRequest extends Message<EnrollmentStatusRequest> {
  /**
   * @generated from field: uint64 userID = 1;
   */
  userID: bigint;

  /**
   * @generated from field: repeated qf.Enrollment.UserStatus statuses = 2;
   */
  statuses: Enrollment_UserStatus[];

  constructor(data?: PartialMessage<EnrollmentStatusRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.EnrollmentStatusRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnrollmentStatusRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnrollmentStatusRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnrollmentStatusRequest;

  static equals(a: EnrollmentStatusRequest | PlainMessage<EnrollmentStatusRequest> | undefined, b: EnrollmentStatusRequest | PlainMessage<EnrollmentStatusRequest> | undefined): boolean;
}

/**
 * @generated from message qf.SubmissionRequest
 */
export declare class SubmissionRequest extends Message<SubmissionRequest> {
  /**
   * @generated from field: uint64 userID = 1;
   */
  userID: bigint;

  /**
   * @generated from field: uint64 groupID = 2;
   */
  groupID: bigint;

  /**
   * @generated from field: uint64 courseID = 3;
   */
  courseID: bigint;

  constructor(data?: PartialMessage<SubmissionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.SubmissionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmissionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmissionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmissionRequest;

  static equals(a: SubmissionRequest | PlainMessage<SubmissionRequest> | undefined, b: SubmissionRequest | PlainMessage<SubmissionRequest> | undefined): boolean;
}

/**
 * @generated from message qf.UpdateSubmissionRequest
 */
export declare class UpdateSubmissionRequest extends Message<UpdateSubmissionRequest> {
  /**
   * @generated from field: uint64 submissionID = 1;
   */
  submissionID: bigint;

  /**
   * @generated from field: uint64 courseID = 2;
   */
  courseID: bigint;

  /**
   * @generated from field: uint32 score = 3;
   */
  score: number;

  /**
   * @generated from field: bool released = 4;
   */
  released: boolean;

  /**
   * @generated from field: qf.Submission.Status status = 5;
   */
  status: Submission_Status;

  constructor(data?: PartialMessage<UpdateSubmissionRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.UpdateSubmissionRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSubmissionRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSubmissionRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSubmissionRequest;

  static equals(a: UpdateSubmissionRequest | PlainMessage<UpdateSubmissionRequest> | undefined, b: UpdateSubmissionRequest | PlainMessage<UpdateSubmissionRequest> | undefined): boolean;
}

/**
 * @generated from message qf.UpdateSubmissionsRequest
 */
export declare class UpdateSubmissionsRequest extends Message<UpdateSubmissionsRequest> {
  /**
   * @generated from field: uint64 courseID = 1;
   */
  courseID: bigint;

  /**
   * @generated from field: uint64 assignmentID = 2;
   */
  assignmentID: bigint;

  /**
   * @generated from field: uint32 scoreLimit = 3;
   */
  scoreLimit: number;

  /**
   * @generated from field: bool release = 4;
   */
  release: boolean;

  /**
   * @generated from field: bool approve = 5;
   */
  approve: boolean;

  constructor(data?: PartialMessage<UpdateSubmissionsRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.UpdateSubmissionsRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateSubmissionsRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateSubmissionsRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateSubmissionsRequest;

  static equals(a: UpdateSubmissionsRequest | PlainMessage<UpdateSubmissionsRequest> | undefined, b: UpdateSubmissionsRequest | PlainMessage<UpdateSubmissionsRequest> | undefined): boolean;
}

/**
 * @generated from message qf.SubmissionReviewersRequest
 */
export declare class SubmissionReviewersRequest extends Message<SubmissionReviewersRequest> {
  /**
   * @generated from field: uint64 submissionID = 1;
   */
  submissionID: bigint;

  /**
   * @generated from field: uint64 courseID = 2;
   */
  courseID: bigint;

  constructor(data?: PartialMessage<SubmissionReviewersRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.SubmissionReviewersRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmissionReviewersRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmissionReviewersRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmissionReviewersRequest;

  static equals(a: SubmissionReviewersRequest | PlainMessage<SubmissionReviewersRequest> | undefined, b: SubmissionReviewersRequest | PlainMessage<SubmissionReviewersRequest> | undefined): boolean;
}

/**
 * @generated from message qf.URLRequest
 */
export declare class URLRequest extends Message<URLRequest> {
  /**
   * @generated from field: uint64 courseID = 1;
   */
  courseID: bigint;

  /**
   * @generated from field: repeated qf.Repository.Type repoTypes = 2;
   */
  repoTypes: Repository_Type[];

  constructor(data?: PartialMessage<URLRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.URLRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): URLRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): URLRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): URLRequest;

  static equals(a: URLRequest | PlainMessage<URLRequest> | undefined, b: URLRequest | PlainMessage<URLRequest> | undefined): boolean;
}

/**
 * used to check whether student/group submission repo is empty
 *
 * @generated from message qf.RepositoryRequest
 */
export declare class RepositoryRequest extends Message<RepositoryRequest> {
  /**
   * @generated from field: uint64 userID = 1;
   */
  userID: bigint;

  /**
   * @generated from field: uint64 groupID = 2;
   */
  groupID: bigint;

  /**
   * @generated from field: uint64 courseID = 3;
   */
  courseID: bigint;

  constructor(data?: PartialMessage<RepositoryRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.RepositoryRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RepositoryRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RepositoryRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RepositoryRequest;

  static equals(a: RepositoryRequest | PlainMessage<RepositoryRequest> | undefined, b: RepositoryRequest | PlainMessage<RepositoryRequest> | undefined): boolean;
}

/**
 * @generated from message qf.Repositories
 */
export declare class Repositories extends Message<Repositories> {
  /**
   * @generated from field: map<string, string> URLs = 1;
   */
  URLs: { [key: string]: string };

  constructor(data?: PartialMessage<Repositories>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Repositories";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Repositories;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Repositories;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Repositories;

  static equals(a: Repositories | PlainMessage<Repositories> | undefined, b: Repositories | PlainMessage<Repositories> | undefined): boolean;
}

/**
 * @generated from message qf.Status
 */
export declare class Status extends Message<Status> {
  /**
   * @generated from field: uint64 Code = 1;
   */
  Code: bigint;

  /**
   * @generated from field: string Error = 2;
   */
  Error: string;

  constructor(data?: PartialMessage<Status>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Status";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Status;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Status;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Status;

  static equals(a: Status | PlainMessage<Status> | undefined, b: Status | PlainMessage<Status> | undefined): boolean;
}

/**
 * @generated from message qf.SubmissionsForCourseRequest
 */
export declare class SubmissionsForCourseRequest extends Message<SubmissionsForCourseRequest> {
  /**
   * @generated from field: uint64 courseID = 1;
   */
  courseID: bigint;

  /**
   * @generated from field: qf.SubmissionsForCourseRequest.Type type = 2;
   */
  type: SubmissionsForCourseRequest_Type;

  constructor(data?: PartialMessage<SubmissionsForCourseRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.SubmissionsForCourseRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmissionsForCourseRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmissionsForCourseRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmissionsForCourseRequest;

  static equals(a: SubmissionsForCourseRequest | PlainMessage<SubmissionsForCourseRequest> | undefined, b: SubmissionsForCourseRequest | PlainMessage<SubmissionsForCourseRequest> | undefined): boolean;
}

/**
 * @generated from enum qf.SubmissionsForCourseRequest.Type
 */
export declare enum SubmissionsForCourseRequest_Type {
  /**
   * @generated from enum value: ALL = 0;
   */
  ALL = 0,

  /**
   * @generated from enum value: INDIVIDUAL = 1;
   */
  INDIVIDUAL = 1,

  /**
   * @generated from enum value: GROUP = 2;
   */
  GROUP = 2,
}

/**
 * @generated from message qf.RebuildRequest
 */
export declare class RebuildRequest extends Message<RebuildRequest> {
  /**
   * @generated from field: uint64 courseID = 1;
   */
  courseID: bigint;

  /**
   * @generated from field: uint64 assignmentID = 2;
   */
  assignmentID: bigint;

  /**
   * @generated from field: uint64 submissionID = 3;
   */
  submissionID: bigint;

  constructor(data?: PartialMessage<RebuildRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.RebuildRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RebuildRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RebuildRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RebuildRequest;

  static equals(a: RebuildRequest | PlainMessage<RebuildRequest> | undefined, b: RebuildRequest | PlainMessage<RebuildRequest> | undefined): boolean;
}

/**
 * @generated from message qf.CourseUserRequest
 */
export declare class CourseUserRequest extends Message<CourseUserRequest> {
  /**
   * @generated from field: string courseCode = 1;
   */
  courseCode: string;

  /**
   * @generated from field: uint32 courseYear = 2;
   */
  courseYear: number;

  /**
   * @generated from field: string userLogin = 3;
   */
  userLogin: string;

  constructor(data?: PartialMessage<CourseUserRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.CourseUserRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CourseUserRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CourseUserRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CourseUserRequest;

  static equals(a: CourseUserRequest | PlainMessage<CourseUserRequest> | undefined, b: CourseUserRequest | PlainMessage<CourseUserRequest> | undefined): boolean;
}

/**
 * Void contains no fields. A server response with a Void still contains a gRPC status code,
 * which can be checked for success or failure. Status code 0 indicates that the requested action was successful,
 * whereas any other status code indicates some failure. As such, the status code can be used as a boolean result from
 * the server.
 *
 * @generated from message qf.Void
 */
export declare class Void extends Message<Void> {
  constructor(data?: PartialMessage<Void>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Void";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Void;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Void;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Void;

  static equals(a: Void | PlainMessage<Void> | undefined, b: Void | PlainMessage<Void> | undefined): boolean;
}

