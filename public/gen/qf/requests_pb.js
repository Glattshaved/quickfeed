// @generated by protoc-gen-es v0.0.10 with parameter "target=js+dts"
// @generated from file qf/requests.proto (package qf, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {proto3} from "@bufbuild/protobuf";
import {Course, Enrollment_UserStatus, EnrollmentLink, Repository_Type, Review, Submission_Status, User} from "./types_pb.js";

/**
 * @generated from message qf.CourseSubmissions
 */
export const CourseSubmissions = proto3.makeMessageType(
  "qf.CourseSubmissions",
  () => [
    { no: 1, name: "course", kind: "message", T: Course },
    { no: 2, name: "links", kind: "message", T: EnrollmentLink, repeated: true },
  ],
);

/**
 * @generated from message qf.ReviewRequest
 */
export const ReviewRequest = proto3.makeMessageType(
  "qf.ReviewRequest",
  () => [
    { no: 1, name: "courseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "review", kind: "message", T: Review },
  ],
);

/**
 * @generated from message qf.CourseRequest
 */
export const CourseRequest = proto3.makeMessageType(
  "qf.CourseRequest",
  () => [
    { no: 1, name: "courseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message qf.UserRequest
 */
export const UserRequest = proto3.makeMessageType(
  "qf.UserRequest",
  () => [
    { no: 1, name: "userID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message qf.GetGroupRequest
 */
export const GetGroupRequest = proto3.makeMessageType(
  "qf.GetGroupRequest",
  () => [
    { no: 1, name: "groupID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message qf.GroupRequest
 */
export const GroupRequest = proto3.makeMessageType(
  "qf.GroupRequest",
  () => [
    { no: 1, name: "userID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "groupID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "courseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message qf.OrgRequest
 */
export const OrgRequest = proto3.makeMessageType(
  "qf.OrgRequest",
  () => [
    { no: 1, name: "orgName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message qf.Organization
 */
export const Organization = proto3.makeMessageType(
  "qf.Organization",
  () => [
    { no: 1, name: "ID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "avatar", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "paymentPlan", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message qf.Organizations
 */
export const Organizations = proto3.makeMessageType(
  "qf.Organizations",
  () => [
    { no: 1, name: "organizations", kind: "message", T: Organization, repeated: true },
  ],
);

/**
 * @generated from message qf.Reviewers
 */
export const Reviewers = proto3.makeMessageType(
  "qf.Reviewers",
  () => [
    { no: 1, name: "reviewers", kind: "message", T: User, repeated: true },
  ],
);

/**
 * EnrollmentRequest is a request for enrolled users of a given course,
 * whose enrollment status match those provided in the request. To ignore group members
 * that otherwise match the enrollment request, set ignoreGroupMembers to true.
 *
 * @generated from message qf.EnrollmentRequest
 */
export const EnrollmentRequest = proto3.makeMessageType(
  "qf.EnrollmentRequest",
  () => [
    { no: 1, name: "courseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "ignoreGroupMembers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "withActivity", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "statuses", kind: "enum", T: proto3.getEnumType(Enrollment_UserStatus), repeated: true },
  ],
);

/**
 * EnrollmentStatusRequest is a request for a given user, with a specific enrollment status.
 *
 * @generated from message qf.EnrollmentStatusRequest
 */
export const EnrollmentStatusRequest = proto3.makeMessageType(
  "qf.EnrollmentStatusRequest",
  () => [
    { no: 1, name: "userID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "statuses", kind: "enum", T: proto3.getEnumType(Enrollment_UserStatus), repeated: true },
  ],
);

/**
 * @generated from message qf.SubmissionRequest
 */
export const SubmissionRequest = proto3.makeMessageType(
  "qf.SubmissionRequest",
  () => [
    { no: 1, name: "userID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "groupID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "courseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message qf.UpdateSubmissionRequest
 */
export const UpdateSubmissionRequest = proto3.makeMessageType(
  "qf.UpdateSubmissionRequest",
  () => [
    { no: 1, name: "submissionID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "courseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "score", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "released", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "status", kind: "enum", T: proto3.getEnumType(Submission_Status) },
  ],
);

/**
 * @generated from message qf.UpdateSubmissionsRequest
 */
export const UpdateSubmissionsRequest = proto3.makeMessageType(
  "qf.UpdateSubmissionsRequest",
  () => [
    { no: 1, name: "courseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "assignmentID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "scoreLimit", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "release", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "approve", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ],
);

/**
 * @generated from message qf.SubmissionReviewersRequest
 */
export const SubmissionReviewersRequest = proto3.makeMessageType(
  "qf.SubmissionReviewersRequest",
  () => [
    { no: 1, name: "submissionID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "courseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message qf.URLRequest
 */
export const URLRequest = proto3.makeMessageType(
  "qf.URLRequest",
  () => [
    { no: 1, name: "courseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "repoTypes", kind: "enum", T: proto3.getEnumType(Repository_Type), repeated: true },
  ],
);

/**
 * used to check whether student/group submission repo is empty
 *
 * @generated from message qf.RepositoryRequest
 */
export const RepositoryRequest = proto3.makeMessageType(
  "qf.RepositoryRequest",
  () => [
    { no: 1, name: "userID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "groupID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "courseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message qf.Repositories
 */
export const Repositories = proto3.makeMessageType(
  "qf.Repositories",
  () => [
    { no: 1, name: "URLs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ],
);

/**
 * @generated from message qf.Status
 */
export const Status = proto3.makeMessageType(
  "qf.Status",
  () => [
    { no: 1, name: "Code", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "Error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message qf.SubmissionsForCourseRequest
 */
export const SubmissionsForCourseRequest = proto3.makeMessageType(
  "qf.SubmissionsForCourseRequest",
  () => [
    { no: 1, name: "courseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(SubmissionsForCourseRequest_Type) },
  ],
);

/**
 * @generated from enum qf.SubmissionsForCourseRequest.Type
 */
export const SubmissionsForCourseRequest_Type = proto3.makeEnum(
  "qf.SubmissionsForCourseRequest.Type",
  [
    {no: 0, name: "ALL"},
    {no: 1, name: "INDIVIDUAL"},
    {no: 2, name: "GROUP"},
  ],
);

/**
 * @generated from message qf.RebuildRequest
 */
export const RebuildRequest = proto3.makeMessageType(
  "qf.RebuildRequest",
  () => [
    { no: 1, name: "courseID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "assignmentID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "submissionID", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ],
);

/**
 * @generated from message qf.CourseUserRequest
 */
export const CourseUserRequest = proto3.makeMessageType(
  "qf.CourseUserRequest",
  () => [
    { no: 1, name: "courseCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "courseYear", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "userLogin", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * Void contains no fields. A server response with a Void still contains a gRPC status code,
 * which can be checked for success or failure. Status code 0 indicates that the requested action was successful,
 * whereas any other status code indicates some failure. As such, the status code can be used as a boolean result from
 * the server.
 *
 * @generated from message qf.Void
 */
export const Void = proto3.makeMessageType(
  "qf.Void",
  [],
);

