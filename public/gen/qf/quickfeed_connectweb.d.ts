// @generated by protoc-gen-connect-web v0.1.0 with parameter "target=js+dts"
// @generated from file qf/quickfeed.proto (package qf, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import {CourseRequest, CourseSubmissions, CourseUserRequest, EnrollmentRequest, EnrollmentStatusRequest, GetGroupRequest, GroupRequest, Organization, OrgRequest, RebuildRequest, Repositories, RepositoryRequest, Reviewers, ReviewRequest, SubmissionRequest, SubmissionReviewersRequest, SubmissionsForCourseRequest, UpdateSubmissionRequest, UpdateSubmissionsRequest, URLRequest, Void} from "./requests_pb.js";
import {Assignments, Course, Courses, Enrollment, Enrollments, GradingBenchmark, GradingCriterion, Group, Groups, Review, Submission, Submissions, User, Users} from "./types_pb.js";
import {MethodKind} from "@bufbuild/protobuf";

/**
 * users //
 *
 * @generated from service qf.QuickFeedService
 */
export declare const QuickFeedService: {
  readonly typeName: "qf.QuickFeedService",
  readonly methods: {
    /**
     * @generated from rpc qf.QuickFeedService.GetUser
     */
    readonly getUser: {
      readonly name: "GetUser",
      readonly I: typeof Void,
      readonly O: typeof User,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.GetUsers
     */
    readonly getUsers: {
      readonly name: "GetUsers",
      readonly I: typeof Void,
      readonly O: typeof Users,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.GetUserByCourse
     */
    readonly getUserByCourse: {
      readonly name: "GetUserByCourse",
      readonly I: typeof CourseUserRequest,
      readonly O: typeof User,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.UpdateUser
     */
    readonly updateUser: {
      readonly name: "UpdateUser",
      readonly I: typeof User,
      readonly O: typeof Void,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.GetGroup
     */
    readonly getGroup: {
      readonly name: "GetGroup",
      readonly I: typeof GetGroupRequest,
      readonly O: typeof Group,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.GetGroupByUserAndCourse
     */
    readonly getGroupByUserAndCourse: {
      readonly name: "GetGroupByUserAndCourse",
      readonly I: typeof GroupRequest,
      readonly O: typeof Group,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.GetGroupsByCourse
     */
    readonly getGroupsByCourse: {
      readonly name: "GetGroupsByCourse",
      readonly I: typeof CourseRequest,
      readonly O: typeof Groups,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.CreateGroup
     */
    readonly createGroup: {
      readonly name: "CreateGroup",
      readonly I: typeof Group,
      readonly O: typeof Group,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.UpdateGroup
     */
    readonly updateGroup: {
      readonly name: "UpdateGroup",
      readonly I: typeof Group,
      readonly O: typeof Group,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.DeleteGroup
     */
    readonly deleteGroup: {
      readonly name: "DeleteGroup",
      readonly I: typeof GroupRequest,
      readonly O: typeof Void,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.GetCourse
     */
    readonly getCourse: {
      readonly name: "GetCourse",
      readonly I: typeof CourseRequest,
      readonly O: typeof Course,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.GetCourses
     */
    readonly getCourses: {
      readonly name: "GetCourses",
      readonly I: typeof Void,
      readonly O: typeof Courses,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.GetCoursesByUser
     */
    readonly getCoursesByUser: {
      readonly name: "GetCoursesByUser",
      readonly I: typeof EnrollmentStatusRequest,
      readonly O: typeof Courses,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.CreateCourse
     */
    readonly createCourse: {
      readonly name: "CreateCourse",
      readonly I: typeof Course,
      readonly O: typeof Course,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.UpdateCourse
     */
    readonly updateCourse: {
      readonly name: "UpdateCourse",
      readonly I: typeof Course,
      readonly O: typeof Void,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.UpdateCourseVisibility
     */
    readonly updateCourseVisibility: {
      readonly name: "UpdateCourseVisibility",
      readonly I: typeof Enrollment,
      readonly O: typeof Void,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.GetAssignments
     */
    readonly getAssignments: {
      readonly name: "GetAssignments",
      readonly I: typeof CourseRequest,
      readonly O: typeof Assignments,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.UpdateAssignments
     */
    readonly updateAssignments: {
      readonly name: "UpdateAssignments",
      readonly I: typeof CourseRequest,
      readonly O: typeof Void,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.GetEnrollmentsByUser
     */
    readonly getEnrollmentsByUser: {
      readonly name: "GetEnrollmentsByUser",
      readonly I: typeof EnrollmentStatusRequest,
      readonly O: typeof Enrollments,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.GetEnrollmentsByCourse
     */
    readonly getEnrollmentsByCourse: {
      readonly name: "GetEnrollmentsByCourse",
      readonly I: typeof EnrollmentRequest,
      readonly O: typeof Enrollments,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.CreateEnrollment
     */
    readonly createEnrollment: {
      readonly name: "CreateEnrollment",
      readonly I: typeof Enrollment,
      readonly O: typeof Void,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.UpdateEnrollments
     */
    readonly updateEnrollments: {
      readonly name: "UpdateEnrollments",
      readonly I: typeof Enrollments,
      readonly O: typeof Void,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Get latest submissions for all course assignments for a user or a group.
     *
     * @generated from rpc qf.QuickFeedService.GetSubmissions
     */
    readonly getSubmissions: {
      readonly name: "GetSubmissions",
      readonly I: typeof SubmissionRequest,
      readonly O: typeof Submissions,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.GetSubmission
     */
    readonly getSubmission: {
      readonly name: "GetSubmission",
      readonly I: typeof SubmissionReviewersRequest,
      readonly O: typeof Submission,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Get lab submissions for every course user or every course group
     *
     * @generated from rpc qf.QuickFeedService.GetSubmissionsByCourse
     */
    readonly getSubmissionsByCourse: {
      readonly name: "GetSubmissionsByCourse",
      readonly I: typeof SubmissionsForCourseRequest,
      readonly O: typeof CourseSubmissions,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.UpdateSubmission
     */
    readonly updateSubmission: {
      readonly name: "UpdateSubmission",
      readonly I: typeof UpdateSubmissionRequest,
      readonly O: typeof Void,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.UpdateSubmissions
     */
    readonly updateSubmissions: {
      readonly name: "UpdateSubmissions",
      readonly I: typeof UpdateSubmissionsRequest,
      readonly O: typeof Void,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.RebuildSubmissions
     */
    readonly rebuildSubmissions: {
      readonly name: "RebuildSubmissions",
      readonly I: typeof RebuildRequest,
      readonly O: typeof Void,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.CreateBenchmark
     */
    readonly createBenchmark: {
      readonly name: "CreateBenchmark",
      readonly I: typeof GradingBenchmark,
      readonly O: typeof GradingBenchmark,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.UpdateBenchmark
     */
    readonly updateBenchmark: {
      readonly name: "UpdateBenchmark",
      readonly I: typeof GradingBenchmark,
      readonly O: typeof Void,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.DeleteBenchmark
     */
    readonly deleteBenchmark: {
      readonly name: "DeleteBenchmark",
      readonly I: typeof GradingBenchmark,
      readonly O: typeof Void,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.CreateCriterion
     */
    readonly createCriterion: {
      readonly name: "CreateCriterion",
      readonly I: typeof GradingCriterion,
      readonly O: typeof GradingCriterion,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.UpdateCriterion
     */
    readonly updateCriterion: {
      readonly name: "UpdateCriterion",
      readonly I: typeof GradingCriterion,
      readonly O: typeof Void,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.DeleteCriterion
     */
    readonly deleteCriterion: {
      readonly name: "DeleteCriterion",
      readonly I: typeof GradingCriterion,
      readonly O: typeof Void,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.CreateReview
     */
    readonly createReview: {
      readonly name: "CreateReview",
      readonly I: typeof ReviewRequest,
      readonly O: typeof Review,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.UpdateReview
     */
    readonly updateReview: {
      readonly name: "UpdateReview",
      readonly I: typeof ReviewRequest,
      readonly O: typeof Review,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.GetReviewers
     */
    readonly getReviewers: {
      readonly name: "GetReviewers",
      readonly I: typeof SubmissionReviewersRequest,
      readonly O: typeof Reviewers,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.GetOrganization
     */
    readonly getOrganization: {
      readonly name: "GetOrganization",
      readonly I: typeof OrgRequest,
      readonly O: typeof Organization,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.GetRepositories
     */
    readonly getRepositories: {
      readonly name: "GetRepositories",
      readonly I: typeof URLRequest,
      readonly O: typeof Repositories,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc qf.QuickFeedService.IsEmptyRepo
     */
    readonly isEmptyRepo: {
      readonly name: "IsEmptyRepo",
      readonly I: typeof RepositoryRequest,
      readonly O: typeof Void,
      readonly kind: MethodKind.Unary,
    },
    /**
     * rpc Notify(Notification) returns (Void) {}
     * rpc NotificationStream(Void) returns (stream Notification) {}
     *
     * @generated from rpc qf.QuickFeedService.SubmissionStream
     */
    readonly submissionStream: {
      readonly name: "SubmissionStream",
      readonly I: typeof Void,
      readonly O: typeof Submission,
      readonly kind: MethodKind.ServerStreaming,
    },
  }
};

