// @generated by protoc-gen-es v0.0.10 with parameter "target=js+dts"
// @generated from file qf/types.proto (package qf, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";
import type {BuildInfo, Score} from "../kit/score/score_pb.js";

/**
 * @generated from message qf.User
 */
export declare class User extends Message<User> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * @generated from field: bool isAdmin = 2;
   */
  isAdmin: boolean;

  /**
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * @generated from field: string studentID = 4;
   */
  studentID: string;

  /**
   * @generated from field: string email = 5;
   */
  email: string;

  /**
   * @generated from field: string avatarURL = 6;
   */
  avatarURL: string;

  /**
   * @generated from field: string login = 7;
   */
  login: string;

  /**
   * @generated from field: bool updateToken = 8;
   */
  updateToken: boolean;

  /**
   * @generated from field: repeated qf.RemoteIdentity remoteIdentities = 9;
   */
  remoteIdentities: RemoteIdentity[];

  /**
   * @generated from field: repeated qf.Enrollment enrollments = 10;
   */
  enrollments: Enrollment[];

  constructor(data?: PartialMessage<User>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.User";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User;

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean;
}

/**
 * @generated from message qf.Users
 */
export declare class Users extends Message<Users> {
  /**
   * @generated from field: repeated qf.User users = 1;
   */
  users: User[];

  constructor(data?: PartialMessage<Users>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Users";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Users;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Users;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Users;

  static equals(a: Users | PlainMessage<Users> | undefined, b: Users | PlainMessage<Users> | undefined): boolean;
}

/**
 * @generated from message qf.RemoteIdentity
 */
export declare class RemoteIdentity extends Message<RemoteIdentity> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * @generated from field: string provider = 2;
   */
  provider: string;

  /**
   * @generated from field: uint64 remoteID = 3;
   */
  remoteID: bigint;

  /**
   * @generated from field: string accessToken = 4;
   */
  accessToken: string;

  /**
   * @generated from field: uint64 userID = 5;
   */
  userID: bigint;

  constructor(data?: PartialMessage<RemoteIdentity>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.RemoteIdentity";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoteIdentity;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoteIdentity;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoteIdentity;

  static equals(a: RemoteIdentity | PlainMessage<RemoteIdentity> | undefined, b: RemoteIdentity | PlainMessage<RemoteIdentity> | undefined): boolean;
}

/**
 * @generated from message qf.Group
 */
export declare class Group extends Message<Group> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: uint64 courseID = 3;
   */
  courseID: bigint;

  /**
   * @generated from field: uint64 teamID = 4;
   */
  teamID: bigint;

  /**
   * @generated from field: qf.Group.GroupStatus status = 5;
   */
  status: Group_GroupStatus;

  /**
   * @generated from field: repeated qf.User users = 6;
   */
  users: User[];

  /**
   * @generated from field: repeated qf.Enrollment enrollments = 7;
   */
  enrollments: Enrollment[];

  constructor(data?: PartialMessage<Group>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Group";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Group;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Group;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Group;

  static equals(a: Group | PlainMessage<Group> | undefined, b: Group | PlainMessage<Group> | undefined): boolean;
}

/**
 * @generated from enum qf.Group.GroupStatus
 */
export declare enum Group_GroupStatus {
  /**
   * @generated from enum value: PENDING = 0;
   */
  PENDING = 0,

  /**
   * @generated from enum value: APPROVED = 1;
   */
  APPROVED = 1,
}

/**
 * @generated from message qf.Groups
 */
export declare class Groups extends Message<Groups> {
  /**
   * @generated from field: repeated qf.Group groups = 1;
   */
  groups: Group[];

  constructor(data?: PartialMessage<Groups>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Groups";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Groups;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Groups;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Groups;

  static equals(a: Groups | PlainMessage<Groups> | undefined, b: Groups | PlainMessage<Groups> | undefined): boolean;
}

/**
 * @generated from message qf.Course
 */
export declare class Course extends Message<Course> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * @generated from field: uint64 courseCreatorID = 2;
   */
  courseCreatorID: bigint;

  /**
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * @generated from field: string code = 4;
   */
  code: string;

  /**
   * @generated from field: uint32 year = 5;
   */
  year: number;

  /**
   * @generated from field: string tag = 6;
   */
  tag: string;

  /**
   * @generated from field: string provider = 7;
   */
  provider: string;

  /**
   * @generated from field: uint64 organizationID = 8;
   */
  organizationID: bigint;

  /**
   * The organization's SCM name, e.g. uis-dat520-2020.
   *
   * @generated from field: string organizationPath = 9;
   */
  organizationPath: string;

  /**
   * @generated from field: uint32 slipDays = 10;
   */
  slipDays: number;

  /**
   * @generated from field: string dockerfile = 11;
   */
  dockerfile: string;

  /**
   * @generated from field: qf.Enrollment.UserStatus enrolled = 12;
   */
  enrolled: Enrollment_UserStatus;

  /**
   * @generated from field: repeated qf.Enrollment enrollments = 13;
   */
  enrollments: Enrollment[];

  /**
   * @generated from field: repeated qf.Assignment assignments = 14;
   */
  assignments: Assignment[];

  /**
   * @generated from field: repeated qf.Group groups = 15;
   */
  groups: Group[];

  constructor(data?: PartialMessage<Course>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Course";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Course;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Course;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Course;

  static equals(a: Course | PlainMessage<Course> | undefined, b: Course | PlainMessage<Course> | undefined): boolean;
}

/**
 * @generated from message qf.Courses
 */
export declare class Courses extends Message<Courses> {
  /**
   * @generated from field: repeated qf.Course courses = 1;
   */
  courses: Course[];

  constructor(data?: PartialMessage<Courses>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Courses";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Courses;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Courses;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Courses;

  static equals(a: Courses | PlainMessage<Courses> | undefined, b: Courses | PlainMessage<Courses> | undefined): boolean;
}

/**
 * @generated from message qf.Repository
 */
export declare class Repository extends Message<Repository> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * @generated from field: uint64 organizationID = 2;
   */
  organizationID: bigint;

  /**
   * ID of a github repository
   *
   * @generated from field: uint64 repositoryID = 3;
   */
  repositoryID: bigint;

  /**
   * @generated from field: uint64 userID = 4;
   */
  userID: bigint;

  /**
   * @generated from field: uint64 groupID = 5;
   */
  groupID: bigint;

  /**
   * @generated from field: string HTMLURL = 6;
   */
  HTMLURL: string;

  /**
   * @generated from field: qf.Repository.Type repoType = 7;
   */
  repoType: Repository_Type;

  /**
   * Issues associated with this repository
   *
   * @generated from field: repeated qf.Issue issues = 8;
   */
  issues: Issue[];

  constructor(data?: PartialMessage<Repository>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Repository";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Repository;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Repository;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Repository;

  static equals(a: Repository | PlainMessage<Repository> | undefined, b: Repository | PlainMessage<Repository> | undefined): boolean;
}

/**
 * @generated from enum qf.Repository.Type
 */
export declare enum Repository_Type {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: INFO = 1;
   */
  INFO = 1,

  /**
   * @generated from enum value: ASSIGNMENTS = 2;
   */
  ASSIGNMENTS = 2,

  /**
   * @generated from enum value: TESTS = 3;
   */
  TESTS = 3,

  /**
   * @generated from enum value: USER = 4;
   */
  USER = 4,

  /**
   * @generated from enum value: GROUP = 5;
   */
  GROUP = 5,
}

/**
 * @generated from message qf.Enrollment
 */
export declare class Enrollment extends Message<Enrollment> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * @generated from field: uint64 courseID = 2;
   */
  courseID: bigint;

  /**
   * @generated from field: uint64 userID = 3;
   */
  userID: bigint;

  /**
   * @generated from field: uint64 groupID = 4;
   */
  groupID: bigint;

  /**
   * @generated from field: qf.User user = 5;
   */
  user?: User;

  /**
   * @generated from field: qf.Course course = 6;
   */
  course?: Course;

  /**
   * @generated from field: qf.Group group = 7;
   */
  group?: Group;

  /**
   * @generated from field: qf.Enrollment.UserStatus status = 8;
   */
  status: Enrollment_UserStatus;

  /**
   * @generated from field: qf.Enrollment.DisplayState state = 9;
   */
  state: Enrollment_DisplayState;

  /**
   * @generated from field: uint32 slipDaysRemaining = 10;
   */
  slipDaysRemaining: number;

  /**
   * @generated from field: string lastActivityDate = 11;
   */
  lastActivityDate: string;

  /**
   * @generated from field: uint64 totalApproved = 12;
   */
  totalApproved: bigint;

  /**
   * @generated from field: repeated qf.UsedSlipDays usedSlipDays = 13;
   */
  usedSlipDays: UsedSlipDays[];

  constructor(data?: PartialMessage<Enrollment>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Enrollment";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Enrollment;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Enrollment;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Enrollment;

  static equals(a: Enrollment | PlainMessage<Enrollment> | undefined, b: Enrollment | PlainMessage<Enrollment> | undefined): boolean;
}

/**
 * @generated from enum qf.Enrollment.UserStatus
 */
export declare enum Enrollment_UserStatus {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: PENDING = 1;
   */
  PENDING = 1,

  /**
   * @generated from enum value: STUDENT = 2;
   */
  STUDENT = 2,

  /**
   * @generated from enum value: TEACHER = 3;
   */
  TEACHER = 3,
}

/**
 * @generated from enum qf.Enrollment.DisplayState
 */
export declare enum Enrollment_DisplayState {
  /**
   * @generated from enum value: UNSET = 0;
   */
  UNSET = 0,

  /**
   * @generated from enum value: HIDDEN = 1;
   */
  HIDDEN = 1,

  /**
   * @generated from enum value: VISIBLE = 2;
   */
  VISIBLE = 2,

  /**
   * @generated from enum value: FAVORITE = 3;
   */
  FAVORITE = 3,
}

/**
 * @generated from message qf.UsedSlipDays
 */
export declare class UsedSlipDays extends Message<UsedSlipDays> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * @generated from field: uint64 enrollmentID = 2;
   */
  enrollmentID: bigint;

  /**
   * @generated from field: uint64 assignmentID = 3;
   */
  assignmentID: bigint;

  /**
   * @generated from field: uint32 usedDays = 4;
   */
  usedDays: number;

  constructor(data?: PartialMessage<UsedSlipDays>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.UsedSlipDays";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UsedSlipDays;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UsedSlipDays;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UsedSlipDays;

  static equals(a: UsedSlipDays | PlainMessage<UsedSlipDays> | undefined, b: UsedSlipDays | PlainMessage<UsedSlipDays> | undefined): boolean;
}

/**
 * @generated from message qf.Enrollments
 */
export declare class Enrollments extends Message<Enrollments> {
  /**
   * @generated from field: repeated qf.Enrollment enrollments = 1;
   */
  enrollments: Enrollment[];

  constructor(data?: PartialMessage<Enrollments>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Enrollments";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Enrollments;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Enrollments;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Enrollments;

  static equals(a: Enrollments | PlainMessage<Enrollments> | undefined, b: Enrollments | PlainMessage<Enrollments> | undefined): boolean;
}

/**
 * @generated from message qf.Assignment
 */
export declare class Assignment extends Message<Assignment> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * foreign key
   *
   * @generated from field: uint64 CourseID = 2;
   */
  CourseID: bigint;

  /**
   * @generated from field: string name = 3;
   */
  name: string;

  /**
   * this assignment's run.sh script (the content)
   *
   * @generated from field: string runScriptContent = 4;
   */
  runScriptContent: string;

  /**
   * @generated from field: string deadline = 5;
   */
  deadline: string;

  /**
   * @generated from field: bool autoApprove = 6;
   */
  autoApprove: boolean;

  /**
   * @generated from field: uint32 order = 7;
   */
  order: number;

  /**
   * @generated from field: bool isGroupLab = 8;
   */
  isGroupLab: boolean;

  /**
   * minimal score limit for auto approval
   *
   * @generated from field: uint32 scoreLimit = 9;
   */
  scoreLimit: number;

  /**
   * number of reviewers that will review submissions for this assignment
   *
   * @generated from field: uint32 reviewers = 10;
   */
  reviewers: number;

  /**
   * container timeout for this assignment
   *
   * @generated from field: uint32 containerTimeout = 11;
   */
  containerTimeout: number;

  /**
   * submissions produced for this assignment
   *
   * @generated from field: repeated qf.Submission submissions = 12;
   */
  submissions: Submission[];

  /**
   * tasks associated with this assignment
   *
   * @generated from field: repeated qf.Task tasks = 13;
   */
  tasks: Task[];

  /**
   * grading benchmarks for this assignment
   *
   * @generated from field: repeated qf.GradingBenchmark gradingBenchmarks = 14;
   */
  gradingBenchmarks: GradingBenchmark[];

  constructor(data?: PartialMessage<Assignment>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Assignment";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Assignment;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Assignment;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Assignment;

  static equals(a: Assignment | PlainMessage<Assignment> | undefined, b: Assignment | PlainMessage<Assignment> | undefined): boolean;
}

/**
 * @generated from message qf.Task
 */
export declare class Task extends Message<Task> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * foreign key
   *
   * @generated from field: uint64 assignmentID = 2;
   */
  assignmentID: bigint;

  /**
   * @generated from field: uint32 assignmentOrder = 3;
   */
  assignmentOrder: number;

  /**
   * @generated from field: string title = 4;
   */
  title: string;

  /**
   * @generated from field: string body = 5;
   */
  body: string;

  /**
   * @generated from field: string name = 6;
   */
  name: string;

  /**
   * Issues that use this task as a benchmark
   *
   * @generated from field: repeated qf.Issue issues = 7;
   */
  issues: Issue[];

  constructor(data?: PartialMessage<Task>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Task";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Task;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Task;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Task;

  static equals(a: Task | PlainMessage<Task> | undefined, b: Task | PlainMessage<Task> | undefined): boolean;
}

/**
 * @generated from message qf.Issue
 */
export declare class Issue extends Message<Issue> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * Represents the internal ID of a repository
   *
   * @generated from field: uint64 repositoryID = 2;
   */
  repositoryID: bigint;

  /**
   * Task that this issue draws its content from
   *
   * @generated from field: uint64 taskID = 3;
   */
  taskID: bigint;

  /**
   * Issue number on scm. Needed for associating db issue with scm issue
   *
   * @generated from field: uint64 issueNumber = 4;
   */
  issueNumber: bigint;

  constructor(data?: PartialMessage<Issue>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Issue";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Issue;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Issue;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Issue;

  static equals(a: Issue | PlainMessage<Issue> | undefined, b: Issue | PlainMessage<Issue> | undefined): boolean;
}

/**
 * @generated from message qf.PullRequest
 */
export declare class PullRequest extends Message<PullRequest> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * Represents the scm repository ID
   *
   * @generated from field: uint64 scmRepositoryID = 2;
   */
  scmRepositoryID: bigint;

  /**
   * Foreign key
   *
   * @generated from field: uint64 taskID = 3;
   */
  taskID: bigint;

  /**
   * Foreign key
   *
   * @generated from field: uint64 issueID = 4;
   */
  issueID: bigint;

  /**
   * The user who owns this PR
   *
   * @generated from field: uint64 userID = 5;
   */
  userID: bigint;

  /**
   * Scm ID of the comment used for automatic feedback
   *
   * @generated from field: uint64 scmCommentID = 6;
   */
  scmCommentID: bigint;

  /**
   * The source branch for this pull request
   *
   * @generated from field: string sourceBranch = 7;
   */
  sourceBranch: string;

  /**
   * Pull request number
   *
   * @generated from field: uint64 number = 8;
   */
  number: bigint;

  /**
   * @generated from field: qf.PullRequest.Stage stage = 9;
   */
  stage: PullRequest_Stage;

  constructor(data?: PartialMessage<PullRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.PullRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullRequest;

  static equals(a: PullRequest | PlainMessage<PullRequest> | undefined, b: PullRequest | PlainMessage<PullRequest> | undefined): boolean;
}

/**
 * @generated from enum qf.PullRequest.Stage
 */
export declare enum PullRequest_Stage {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: DRAFT = 1;
   */
  DRAFT = 1,

  /**
   * @generated from enum value: REVIEW = 2;
   */
  REVIEW = 2,

  /**
   * @generated from enum value: APPROVED = 3;
   */
  APPROVED = 3,
}

/**
 * @generated from message qf.Assignments
 */
export declare class Assignments extends Message<Assignments> {
  /**
   * @generated from field: repeated qf.Assignment assignments = 1;
   */
  assignments: Assignment[];

  constructor(data?: PartialMessage<Assignments>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Assignments";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Assignments;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Assignments;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Assignments;

  static equals(a: Assignments | PlainMessage<Assignments> | undefined, b: Assignments | PlainMessage<Assignments> | undefined): boolean;
}

/**
 * @generated from message qf.Submission
 */
export declare class Submission extends Message<Submission> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * foreign key
   *
   * @generated from field: uint64 AssignmentID = 2;
   */
  AssignmentID: bigint;

  /**
   * @generated from field: uint64 userID = 3;
   */
  userID: bigint;

  /**
   * @generated from field: uint64 groupID = 4;
   */
  groupID: bigint;

  /**
   * @generated from field: uint32 score = 5;
   */
  score: number;

  /**
   * @generated from field: string commitHash = 6;
   */
  commitHash: string;

  /**
   * true => feedback is visible to the student or group members
   *
   * @generated from field: bool released = 7;
   */
  released: boolean;

  /**
   * @generated from field: qf.Submission.Status status = 8;
   */
  status: Submission_Status;

  /**
   * @generated from field: string approvedDate = 9;
   */
  approvedDate: string;

  /**
   * reviews produced for this submission
   *
   * @generated from field: repeated qf.Review reviews = 10;
   */
  reviews: Review[];

  /**
   * build info for tests
   *
   * @generated from field: score.BuildInfo BuildInfo = 11;
   */
  BuildInfo?: BuildInfo;

  /**
   * list of scores for different tests
   *
   * @generated from field: repeated score.Score Scores = 12;
   */
  Scores: Score[];

  constructor(data?: PartialMessage<Submission>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Submission";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Submission;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Submission;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Submission;

  static equals(a: Submission | PlainMessage<Submission> | undefined, b: Submission | PlainMessage<Submission> | undefined): boolean;
}

/**
 * @generated from enum qf.Submission.Status
 */
export declare enum Submission_Status {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: APPROVED = 1;
   */
  APPROVED = 1,

  /**
   * @generated from enum value: REJECTED = 2;
   */
  REJECTED = 2,

  /**
   * @generated from enum value: REVISION = 3;
   */
  REVISION = 3,
}

/**
 * @generated from message qf.Submissions
 */
export declare class Submissions extends Message<Submissions> {
  /**
   * @generated from field: repeated qf.Submission submissions = 1;
   */
  submissions: Submission[];

  constructor(data?: PartialMessage<Submissions>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Submissions";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Submissions;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Submissions;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Submissions;

  static equals(a: Submissions | PlainMessage<Submissions> | undefined, b: Submissions | PlainMessage<Submissions> | undefined): boolean;
}

/**
 * @generated from message qf.GradingBenchmark
 */
export declare class GradingBenchmark extends Message<GradingBenchmark> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * foreign key
   *
   * @generated from field: uint64 CourseID = 2;
   */
  CourseID: bigint;

  /**
   * foreign key
   *
   * @generated from field: uint64 AssignmentID = 3;
   */
  AssignmentID: bigint;

  /**
   * foreign key
   *
   * @generated from field: uint64 ReviewID = 4;
   */
  ReviewID: bigint;

  /**
   * @generated from field: string heading = 5;
   */
  heading: string;

  /**
   * @generated from field: string comment = 6;
   */
  comment: string;

  /**
   * @generated from field: repeated qf.GradingCriterion criteria = 7;
   */
  criteria: GradingCriterion[];

  constructor(data?: PartialMessage<GradingBenchmark>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.GradingBenchmark";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GradingBenchmark;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GradingBenchmark;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GradingBenchmark;

  static equals(a: GradingBenchmark | PlainMessage<GradingBenchmark> | undefined, b: GradingBenchmark | PlainMessage<GradingBenchmark> | undefined): boolean;
}

/**
 * @generated from message qf.Benchmarks
 */
export declare class Benchmarks extends Message<Benchmarks> {
  /**
   * @generated from field: repeated qf.GradingBenchmark benchmarks = 1;
   */
  benchmarks: GradingBenchmark[];

  constructor(data?: PartialMessage<Benchmarks>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Benchmarks";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Benchmarks;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Benchmarks;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Benchmarks;

  static equals(a: Benchmarks | PlainMessage<Benchmarks> | undefined, b: Benchmarks | PlainMessage<Benchmarks> | undefined): boolean;
}

/**
 * @generated from message qf.GradingCriterion
 */
export declare class GradingCriterion extends Message<GradingCriterion> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * foreign key
   *
   * @generated from field: uint64 BenchmarkID = 2;
   */
  BenchmarkID: bigint;

  /**
   * foreign key
   *
   * @generated from field: uint64 CourseID = 3;
   */
  CourseID: bigint;

  /**
   * @generated from field: uint64 points = 4;
   */
  points: bigint;

  /**
   * @generated from field: string description = 5;
   */
  description: string;

  /**
   * @generated from field: qf.GradingCriterion.Grade grade = 6;
   */
  grade: GradingCriterion_Grade;

  /**
   * @generated from field: string comment = 7;
   */
  comment: string;

  constructor(data?: PartialMessage<GradingCriterion>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.GradingCriterion";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GradingCriterion;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GradingCriterion;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GradingCriterion;

  static equals(a: GradingCriterion | PlainMessage<GradingCriterion> | undefined, b: GradingCriterion | PlainMessage<GradingCriterion> | undefined): boolean;
}

/**
 * @generated from enum qf.GradingCriterion.Grade
 */
export declare enum GradingCriterion_Grade {
  /**
   * @generated from enum value: NONE = 0;
   */
  NONE = 0,

  /**
   * @generated from enum value: FAILED = 1;
   */
  FAILED = 1,

  /**
   * @generated from enum value: PASSED = 2;
   */
  PASSED = 2,
}

/**
 * @generated from message qf.Review
 */
export declare class Review extends Message<Review> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * foreign key
   *
   * @generated from field: uint64 SubmissionID = 2;
   */
  SubmissionID: bigint;

  /**
   * UserID of the reviewer
   *
   * @generated from field: uint64 ReviewerID = 3;
   */
  ReviewerID: bigint;

  /**
   * @generated from field: string feedback = 4;
   */
  feedback: string;

  /**
   * @generated from field: bool ready = 5;
   */
  ready: boolean;

  /**
   * @generated from field: uint32 score = 6;
   */
  score: number;

  /**
   * @generated from field: repeated qf.GradingBenchmark gradingBenchmarks = 7;
   */
  gradingBenchmarks: GradingBenchmark[];

  /**
   * @generated from field: string edited = 8;
   */
  edited: string;

  constructor(data?: PartialMessage<Review>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.Review";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Review;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Review;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Review;

  static equals(a: Review | PlainMessage<Review> | undefined, b: Review | PlainMessage<Review> | undefined): boolean;
}

/**
 * @generated from message qf.SubmissionLink
 */
export declare class SubmissionLink extends Message<SubmissionLink> {
  /**
   * @generated from field: qf.Assignment assignment = 1;
   */
  assignment?: Assignment;

  /**
   * @generated from field: qf.Submission submission = 2;
   */
  submission?: Submission;

  constructor(data?: PartialMessage<SubmissionLink>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.SubmissionLink";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmissionLink;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmissionLink;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmissionLink;

  static equals(a: SubmissionLink | PlainMessage<SubmissionLink> | undefined, b: SubmissionLink | PlainMessage<SubmissionLink> | undefined): boolean;
}

/**
 * @generated from message qf.EnrollmentLink
 */
export declare class EnrollmentLink extends Message<EnrollmentLink> {
  /**
   * must have course and user/group preloaded
   *
   * @generated from field: qf.Enrollment enrollment = 2;
   */
  enrollment?: Enrollment;

  /**
   * @generated from field: repeated qf.SubmissionLink submissions = 3;
   */
  submissions: SubmissionLink[];

  constructor(data?: PartialMessage<EnrollmentLink>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "qf.EnrollmentLink";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnrollmentLink;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnrollmentLink;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnrollmentLink;

  static equals(a: EnrollmentLink | PlainMessage<EnrollmentLink> | undefined, b: EnrollmentLink | PlainMessage<EnrollmentLink> | undefined): boolean;
}

