// @generated by protoc-gen-es v0.0.10 with parameter "target=js+dts"
// @generated from file kit/score/score.proto (package score, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * Score give the score for a single test named TestName.
 *
 * @generated from message score.Score
 */
export declare class Score extends Message<Score> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * @generated from field: uint64 SubmissionID = 2;
   */
  SubmissionID: bigint;

  /**
   * the unique identifier for a scoring session
   *
   * @generated from field: string Secret = 3;
   */
  Secret: string;

  /**
   * name of the test
   *
   * @generated from field: string TestName = 4;
   */
  TestName: string;

  /**
   * name of task this score belongs to
   *
   * @generated from field: string TaskName = 5;
   */
  TaskName: string;

  /**
   * the score obtained
   *
   * @generated from field: int32 Score = 6;
   */
  Score: number;

  /**
   * max score possible to get on this specific test
   *
   * @generated from field: int32 MaxScore = 7;
   */
  MaxScore: number;

  /**
   * the weight of this test; used to compute final grade
   *
   * @generated from field: int32 Weight = 8;
   */
  Weight: number;

  /**
   * if populated, the frontend may display additional details (TODO(meling) adapt to output from go test -json)
   *
   * @generated from field: string TestDetails = 9;
   */
  TestDetails: string;

  constructor(data?: PartialMessage<Score>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "score.Score";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Score;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Score;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Score;

  static equals(a: Score | PlainMessage<Score> | undefined, b: Score | PlainMessage<Score> | undefined): boolean;
}

/**
 * BuildInfo holds build data for an assignment's test execution.
 *
 * @generated from message score.BuildInfo
 */
export declare class BuildInfo extends Message<BuildInfo> {
  /**
   * @generated from field: uint64 ID = 1;
   */
  ID: bigint;

  /**
   * @generated from field: uint64 SubmissionID = 2;
   */
  SubmissionID: bigint;

  /**
   * @generated from field: string BuildDate = 3;
   */
  BuildDate: string;

  /**
   * @generated from field: string BuildLog = 4;
   */
  BuildLog: string;

  /**
   * @generated from field: int64 ExecTime = 5;
   */
  ExecTime: bigint;

  constructor(data?: PartialMessage<BuildInfo>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "score.BuildInfo";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildInfo;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildInfo;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildInfo;

  static equals(a: BuildInfo | PlainMessage<BuildInfo> | undefined, b: BuildInfo | PlainMessage<BuildInfo> | undefined): boolean;
}

