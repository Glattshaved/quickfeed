[{"/home/jostein/dev/quickfeed/public/src/index.tsx":"1","/home/jostein/dev/quickfeed/public/src/App.tsx":"2","/home/jostein/dev/quickfeed/public/src/overmind/index.tsx":"3","/home/jostein/dev/quickfeed/public/src/components/Todos.tsx":"4","/home/jostein/dev/quickfeed/public/src/overmind/actions.tsx":"5","/home/jostein/dev/quickfeed/public/src/overmind/state.tsx":"6","/home/jostein/dev/quickfeed/public/src/overmind/effects.tsx":"7","/home/jostein/dev/quickfeed/public/src/components/NavBar.tsx":"8","/home/jostein/dev/quickfeed/public/src/components/FilterTodos.tsx":"9","/home/jostein/dev/quickfeed/public/src/components/TodoItem.tsx":"10","/home/jostein/dev/quickfeed/public/src/components/TodoCounter.tsx":"11","/home/jostein/dev/quickfeed/public/src/proto/AgServiceClientPb.js":"12","/home/jostein/dev/quickfeed/public/src/proto/ag_pb.js":"13"},{"size":457,"mtime":1614006970164,"results":"14","hashOfConfig":"15"},{"size":1051,"mtime":1614223225339,"results":"16","hashOfConfig":"15"},{"size":732,"mtime":1611540620478,"results":"17","hashOfConfig":"15"},{"size":1062,"mtime":1614224299522,"results":"18","hashOfConfig":"15"},{"size":1988,"mtime":1614222636134,"results":"19","hashOfConfig":"15"},{"size":1147,"mtime":1613879075789,"results":"20","hashOfConfig":"15"},{"size":1646,"mtime":1614005984459,"results":"21","hashOfConfig":"15"},{"size":677,"mtime":1613950784360,"results":"22","hashOfConfig":"15"},{"size":753,"mtime":1611591670000,"results":"23","hashOfConfig":"15"},{"size":1511,"mtime":1612022604000,"results":"24","hashOfConfig":"15"},{"size":320,"mtime":1614223203675,"results":"25","hashOfConfig":"15"},{"size":31301,"mtime":1610240539777,"results":"26","hashOfConfig":"15"},{"size":332038,"mtime":1613501786650,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},"r8so40",{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/jostein/dev/quickfeed/public/src/index.tsx",["62","63"],"import React from \"react\";\r\nimport ReactDOM from \"react-dom\"\r\nimport { render } from 'react-dom'\r\nimport './index.css'\r\n\r\nimport { createOvermind } from \"overmind\";\r\nimport { Provider } from 'overmind-react'\r\nimport { config, useOvermind } from \"./overmind\";\r\nimport App from './App'\r\n\r\nconst overmind = createOvermind(config)\r\n\r\n\r\n\r\nrender((<Provider value={overmind}>\r\n            <App />\r\n        </Provider>\r\n        ), document.getElementById('root'));","/home/jostein/dev/quickfeed/public/src/App.tsx",["64","65","66","67","68","69"],"import React, { Component, useEffect, useState } from \"react\";\r\nimport { useOvermind } from \"./overmind\";\r\nimport Todos from './components/Todos'\r\nimport './App.css'\r\nimport TodoCounter from \"./components/TodoCounter\";\r\n\r\nconst App = () => {\r\n\r\n    const [loggedIn, setLoggedIn] = useState(false)\r\n\r\n    useEffect(() => {\r\n        actions.getUser()\r\n        .then(res => setLoggedIn(true)) // .then(setLoggedIn(true))\r\n\r\n        // TODO Change action.getUser to a promise, add conditional rendering that only renders after getUser() has finished.\r\n        // Change local state const [loggedIn, setLoggedIn] = useState(); to loggedIn when getUser() finished\r\n        // Spinny loading thingy until done?\r\n        // {loggedIn == false && <Loading></Loading}\r\n        // {loggedIn == true && <UserPage></UserPage>}\r\n\r\n    }, [loggedIn, setLoggedIn])\r\n\r\n    // General\r\n    const { state, actions, effects, reaction } = useOvermind()\r\n    if (loggedIn == true) {\r\n        return <Todos />\r\n    }\r\n    return <TodoCounter />\r\n}\r\n\r\n\r\n\r\nexport default App;","/home/jostein/dev/quickfeed/public/src/overmind/index.tsx",[],"/home/jostein/dev/quickfeed/public/src/components/Todos.tsx",["70","71","72","73","74","75","76"],"/home/jostein/dev/quickfeed/public/src/overmind/actions.tsx",["77","78","79","80","81"],"import { Context, Action } from \"overmind\";\r\nimport { Todo } from './state'\r\nimport { User } from \"../proto/ag_pb\";\r\nimport { useEffects } from \".\";\r\n\r\nexport const addTodo: Action<string> = ({state}, title) => {\r\n    state.todos.push({\r\n        id: state.todos.length ,\r\n        title: title,\r\n        completed: false,\r\n    });\r\n};\r\n\r\nexport const onLoad: ({state, effects, actions}: { state: any; effects: any; actions: any }) => Promise<void> = async ({state, effects, actions}) => {\r\n    await effects.api.getTodos().then((response: any) => {\r\n        let todos = Object(response)\r\n        todos.forEach(async function (todo: {title: string, completed: boolean}) {\r\n            await actions.addTodo(todo.title)\r\n        })\r\n    })\r\n}\r\n\r\nexport const toggleTodo: Action<number> = ({state}, id) => {\r\n    state.todos[id].completed = !state.todos[id].completed\r\n}\r\n\r\nexport const editTodo: Action<number> = ({state}, id) => {\r\n    state.isEditing = id\r\n}\r\n\r\nexport const saveEdit: Action<Todo> = ({state}, todo) => {\r\n    state.isEditing = -1\r\n    console.log(todo)\r\n    if (todo.title.length > 0) {state.todos[todo.id].title = todo.title}\r\n}\r\n\r\nexport const changeShowCount: Action<string> = ({state}, num) => {\r\n    state.numShow = +num\r\n}\r\n\r\nexport const getUser: Action<void, Promise<boolean>> = ({state, effects}) => {\r\n    return effects.api.getUser()\r\n    .then((user) => {\r\n        if (user.id == undefined) {\r\n            return false\r\n        }\r\n        state.user = user;\r\n        return true\r\n    })\r\n    \r\n}\r\nexport const getUsers: Action<void> = ({state, effects}) => {\r\n    state.users = []\r\n    effects.api.getUsers(state).then(users => {\r\n        users.forEach(user => {\r\n            if (user.getStudentid() != \"\") {\r\n                state.users.push(user)\r\n            }\r\n        });\r\n    })\r\n}\r\n\r\nexport const getCourses: Action<void> = ({state, effects}) => {\r\n    effects.api.getCourses(state).then(courses => {\r\n        console.log(\"getting courses\")\r\n    })\r\n}\r\n","/home/jostein/dev/quickfeed/public/src/overmind/state.tsx",["82","83"],"import { userInfo } from \"os\";\r\nimport { derived } from \"overmind\";\r\nimport { isMetaProperty } from \"typescript\";\r\nimport { User } from \"../proto/ag_pb\";\r\n\r\n\r\nexport interface Todo {\r\n   id: number;\r\n   title: string;\r\n   completed: boolean;\r\n}\r\n\r\nexport interface IUser {\r\n    remoteID: number;\r\n    avatarurl: string;\r\n    email: string;\r\n    id: number;\r\n    isadmin: boolean;\r\n    name: string;\r\n    studentid: number;\r\n}\r\n\r\n\r\n\r\n\r\nexport type State = {\r\n    user: IUser,\r\n    todos: Todo[],\r\n    num: number,\r\n    isEditing: number,\r\n    numShow: number,\r\n    todoSlice: Todo[],\r\n    Metadata: {user: string},\r\n    users: User[]\r\n}\r\n\r\nconst getUserID = (currentState: State) => {\r\n    return {'user': currentState.user.id.toString()}\r\n}\r\n\r\nexport const state: State = {\r\n    user: {avatarurl: '', email: '', id: -1, isadmin: false, name: '', remoteID: -1, studentid: -1},\r\n    todos: [],\r\n    num: derived((state: State) => state.todos.length),\r\n    isEditing: -1,\r\n    numShow: 200,\r\n    todoSlice: derived((state: State) => state.todos.slice(0, state.numShow)),\r\n    Metadata: derived((state: State) =>  getUserID(state)),\r\n    users: []\r\n};","/home/jostein/dev/quickfeed/public/src/overmind/effects.tsx",["84","85","86","87","88"],"import { Context} from 'overmind'\r\nimport {Todo, IUser, State, state} from \"./state\";\r\n\r\nimport axios from \"axios\";\r\nimport { AutograderServiceClient } from \"../proto/AgServiceClientPb\";\r\nimport { Void, User, Users, Course } from \"../proto/ag_pb\";\r\nimport * as grpcWeb from \"grpc-web\"\r\n\r\nconst AgService = new AutograderServiceClient(\"https://\" + window.location.hostname, null, null);\r\n// Effects should contain all impure functions used to manage state.\r\n\r\nexport const api = {\r\n\r\n    // TODO:\r\n    // Could structure this into either separate exports, ex. 'export const course_api' and 'export const user_api'\r\n    // or 'export const api { course: { ... functions related to course ... }, user: { ... functions related to user ... }}'\r\n\r\n    getTodos: async (): Promise<Object> => {\r\n        const response = await axios.get('https://jsonplaceholder.typicode.com/todos')\r\n        return response.data\r\n    },\r\n    // getUser requests your user data (session key sent in request) and returns a User object if you are logged in.\r\n    getUser: async (): Promise<IUser> => {\r\n        const resp = await fetch(\"https://\" + window.location.host + \"/api/v1/user\")\r\n        return resp.json()\r\n    },\r\n\r\n    // Returns all users from the server\r\n    getUsers: async (state: State): Promise<Array<User>> => {\r\n            return (await AgService.getUsers(new Void(), {'user': state.Metadata.user})).getUsersList()       \r\n    },\r\n\r\n    // Returns all courses from the server\r\n    getCourses: async (state: State): Promise<Course[]> => {\r\n        return (await AgService.getCourses(new Void(), {'user': state.Metadata.user})).getCoursesList()\r\n    }\r\n}","/home/jostein/dev/quickfeed/public/src/components/NavBar.tsx",["89"],"import React, { Component } from \"react\";\nimport { useOvermind } from \"../overmind\";\n\nconst NavBar = () => {\n    const { state, actions } = useOvermind() \n\n    const checkUserLoggedIn = () => {\n        if (state.user.id > 0) {\n            return <a href=\"/logout\"><button>Logout</button></a>\n        }\n        return <a href=\"/auth/github\"><button>Login</button></a>\n    }\n   \n    const users = () => {\n        actions.getUsers()\n        actions.getCourses()\n    }\n\n    return (\n        <nav className=\"navbar\">\n            <button className=\"navbar-brand\" onClick={users}>Autograder</button>\n            {checkUserLoggedIn()}\n        </nav>\n    )\n    \n}\n\nexport default NavBar","/home/jostein/dev/quickfeed/public/src/components/FilterTodos.tsx",[],"/home/jostein/dev/quickfeed/public/src/components/TodoItem.tsx",["90","91","92","93"],"import * as React from 'react'\r\nimport { useOvermind } from \"../overmind\";\r\nimport {state, Todo} from '../overmind/state'\r\nimport {useCallback} from \"react\";\r\n\r\n\r\n\r\ntype Props = {\r\n    todo: Todo;\r\n\r\n}\r\n\r\n\r\n\r\nconst TodoItem = ({ todo }: Props) => {\r\n\r\n    const { state, actions } = useOvermind()\r\n\r\n    const handleToggleChange = () => {\r\n        actions.toggleTodo(todo.id)\r\n    }\r\n\r\n    const editHandler = () => {\r\n        actions.editTodo(todo.id);\r\n    }\r\n\r\n    const saveEditHandler = useCallback((event) => {\r\n        if (event.keyCode != 13) { return }\r\n        actions.saveEdit({id: todo.id, title: event.target.value, completed: todo.completed})\r\n    }, [actions.saveEdit])\r\n\r\n    let completed = { }\r\n\r\n    if(todo.completed){\r\n        completed = {\r\n            color: 'green',\r\n            'font-style': 'italic',\r\n            'text-decoration': 'line-through'\r\n\r\n        }\r\n    }\r\n\r\n    if (state.isEditing == todo.id) {\r\n        return (\r\n            <div className='todo-item'>\r\n                <h4><input type='checkbox' onChange={handleToggleChange} checked={todo.completed}/><input placeholder={todo.title} onKeyDown={saveEditHandler}/></h4>\r\n            </div>\r\n        )\r\n    }   else {\r\n        return (\r\n            <div className='todo-item' style={completed}>\r\n\r\n                <h4><input type='checkbox' onChange={handleToggleChange} checked={todo.completed}/> {todo.title}<span onClick={editHandler}> *</span></h4>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoItem","/home/jostein/dev/quickfeed/public/src/components/TodoCounter.tsx",[],"/home/jostein/dev/quickfeed/public/src/proto/AgServiceClientPb.js",["94"],"\"use strict\";\n/**\n * @fileoverview gRPC-Web generated client stub for\n * @enhanceable\n * @public\n */\nexports.__esModule = true;\nexports.AutograderServiceClient = void 0;\n// GENERATED CODE -- DO NOT EDIT!\n/* eslint-disable */\n// @ts-nocheck\nvar grpcWeb = require(\"grpc-web\");\nvar ag_pb_1 = require(\"./ag_pb\");\nvar AutograderServiceClient = /** @class */ (function () {\n    function AutograderServiceClient(hostname, credentials, options) {\n        this.methodInfoGetUser = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.User, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.User.deserializeBinary);\n        this.methodInfoGetUsers = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Users, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Users.deserializeBinary);\n        this.methodInfoGetUserByCourse = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.User, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.User.deserializeBinary);\n        this.methodInfoUpdateUser = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        this.methodInfoIsAuthorizedTeacher = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.AuthorizationResponse, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.AuthorizationResponse.deserializeBinary);\n        this.methodInfoGetGroup = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Group, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Group.deserializeBinary);\n        this.methodInfoGetGroupByUserAndCourse = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Group, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Group.deserializeBinary);\n        this.methodInfoGetGroupsByCourse = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Groups, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Groups.deserializeBinary);\n        this.methodInfoCreateGroup = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Group, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Group.deserializeBinary);\n        this.methodInfoUpdateGroup = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        this.methodInfoDeleteGroup = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        this.methodInfoGetCourse = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Course, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Course.deserializeBinary);\n        this.methodInfoGetCourses = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Courses, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Courses.deserializeBinary);\n        this.methodInfoGetCoursesByUser = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Courses, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Courses.deserializeBinary);\n        this.methodInfoCreateCourse = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Course, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Course.deserializeBinary);\n        this.methodInfoUpdateCourse = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        this.methodInfoUpdateCourseVisibility = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        this.methodInfoGetAssignments = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Assignments, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Assignments.deserializeBinary);\n        this.methodInfoUpdateAssignments = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        this.methodInfoGetEnrollmentsByUser = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Enrollments, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Enrollments.deserializeBinary);\n        this.methodInfoGetEnrollmentsByCourse = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Enrollments, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Enrollments.deserializeBinary);\n        this.methodInfoCreateEnrollment = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        this.methodInfoUpdateEnrollment = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        this.methodInfoUpdateEnrollments = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        this.methodInfoGetSubmissions = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Submissions, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Submissions.deserializeBinary);\n        this.methodInfoGetSubmissionsByCourse = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.CourseSubmissions, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.CourseSubmissions.deserializeBinary);\n        this.methodInfoUpdateSubmission = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        this.methodInfoUpdateSubmissions = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        this.methodInfoRebuildSubmission = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Submission, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Submission.deserializeBinary);\n        this.methodInfoCreateBenchmark = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.GradingBenchmark, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.GradingBenchmark.deserializeBinary);\n        this.methodInfoUpdateBenchmark = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        this.methodInfoDeleteBenchmark = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        this.methodInfoCreateCriterion = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.GradingCriterion, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.GradingCriterion.deserializeBinary);\n        this.methodInfoUpdateCriterion = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        this.methodInfoDeleteCriterion = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        this.methodInfoCreateReview = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Review, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Review.deserializeBinary);\n        this.methodInfoUpdateReview = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        this.methodInfoGetReviewers = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Reviewers, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Reviewers.deserializeBinary);\n        this.methodInfoLoadCriteria = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Benchmarks, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Benchmarks.deserializeBinary);\n        this.methodInfoGetProviders = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Providers, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Providers.deserializeBinary);\n        this.methodInfoGetOrganization = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Organization, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Organization.deserializeBinary);\n        this.methodInfoGetRepositories = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Repositories, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Repositories.deserializeBinary);\n        this.methodInfoIsEmptyRepo = new grpcWeb.AbstractClientBase.MethodInfo(ag_pb_1.Void, function (request) {\n            return request.serializeBinary();\n        }, ag_pb_1.Void.deserializeBinary);\n        if (!options)\n            options = {};\n        if (!credentials)\n            credentials = {};\n        options['format'] = 'binary';\n        this.client_ = new grpcWeb.GrpcWebClientBase(options);\n        this.hostname_ = hostname;\n        this.credentials_ = credentials;\n        this.options_ = options;\n    }\n    AutograderServiceClient.prototype.getUser = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetUser', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetUser, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetUser', request, metadata || {}, this.methodInfoGetUser);\n    };\n    AutograderServiceClient.prototype.getUsers = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetUsers', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetUsers, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetUsers', request, metadata || {}, this.methodInfoGetUsers);\n    };\n    AutograderServiceClient.prototype.getUserByCourse = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetUserByCourse', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetUserByCourse, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetUserByCourse', request, metadata || {}, this.methodInfoGetUserByCourse);\n    };\n    AutograderServiceClient.prototype.updateUser = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/UpdateUser', this.hostname_).toString(), request, metadata || {}, this.methodInfoUpdateUser, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/UpdateUser', request, metadata || {}, this.methodInfoUpdateUser);\n    };\n    AutograderServiceClient.prototype.isAuthorizedTeacher = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/IsAuthorizedTeacher', this.hostname_).toString(), request, metadata || {}, this.methodInfoIsAuthorizedTeacher, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/IsAuthorizedTeacher', request, metadata || {}, this.methodInfoIsAuthorizedTeacher);\n    };\n    AutograderServiceClient.prototype.getGroup = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetGroup', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetGroup, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetGroup', request, metadata || {}, this.methodInfoGetGroup);\n    };\n    AutograderServiceClient.prototype.getGroupByUserAndCourse = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetGroupByUserAndCourse', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetGroupByUserAndCourse, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetGroupByUserAndCourse', request, metadata || {}, this.methodInfoGetGroupByUserAndCourse);\n    };\n    AutograderServiceClient.prototype.getGroupsByCourse = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetGroupsByCourse', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetGroupsByCourse, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetGroupsByCourse', request, metadata || {}, this.methodInfoGetGroupsByCourse);\n    };\n    AutograderServiceClient.prototype.createGroup = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/CreateGroup', this.hostname_).toString(), request, metadata || {}, this.methodInfoCreateGroup, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/CreateGroup', request, metadata || {}, this.methodInfoCreateGroup);\n    };\n    AutograderServiceClient.prototype.updateGroup = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/UpdateGroup', this.hostname_).toString(), request, metadata || {}, this.methodInfoUpdateGroup, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/UpdateGroup', request, metadata || {}, this.methodInfoUpdateGroup);\n    };\n    AutograderServiceClient.prototype.deleteGroup = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/DeleteGroup', this.hostname_).toString(), request, metadata || {}, this.methodInfoDeleteGroup, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/DeleteGroup', request, metadata || {}, this.methodInfoDeleteGroup);\n    };\n    AutograderServiceClient.prototype.getCourse = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetCourse', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetCourse, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetCourse', request, metadata || {}, this.methodInfoGetCourse);\n    };\n    AutograderServiceClient.prototype.getCourses = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetCourses', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetCourses, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetCourses', request, metadata || {}, this.methodInfoGetCourses);\n    };\n    AutograderServiceClient.prototype.getCoursesByUser = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetCoursesByUser', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetCoursesByUser, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetCoursesByUser', request, metadata || {}, this.methodInfoGetCoursesByUser);\n    };\n    AutograderServiceClient.prototype.createCourse = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/CreateCourse', this.hostname_).toString(), request, metadata || {}, this.methodInfoCreateCourse, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/CreateCourse', request, metadata || {}, this.methodInfoCreateCourse);\n    };\n    AutograderServiceClient.prototype.updateCourse = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/UpdateCourse', this.hostname_).toString(), request, metadata || {}, this.methodInfoUpdateCourse, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/UpdateCourse', request, metadata || {}, this.methodInfoUpdateCourse);\n    };\n    AutograderServiceClient.prototype.updateCourseVisibility = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/UpdateCourseVisibility', this.hostname_).toString(), request, metadata || {}, this.methodInfoUpdateCourseVisibility, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/UpdateCourseVisibility', request, metadata || {}, this.methodInfoUpdateCourseVisibility);\n    };\n    AutograderServiceClient.prototype.getAssignments = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetAssignments', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetAssignments, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetAssignments', request, metadata || {}, this.methodInfoGetAssignments);\n    };\n    AutograderServiceClient.prototype.updateAssignments = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/UpdateAssignments', this.hostname_).toString(), request, metadata || {}, this.methodInfoUpdateAssignments, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/UpdateAssignments', request, metadata || {}, this.methodInfoUpdateAssignments);\n    };\n    AutograderServiceClient.prototype.getEnrollmentsByUser = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetEnrollmentsByUser', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetEnrollmentsByUser, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetEnrollmentsByUser', request, metadata || {}, this.methodInfoGetEnrollmentsByUser);\n    };\n    AutograderServiceClient.prototype.getEnrollmentsByCourse = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetEnrollmentsByCourse', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetEnrollmentsByCourse, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetEnrollmentsByCourse', request, metadata || {}, this.methodInfoGetEnrollmentsByCourse);\n    };\n    AutograderServiceClient.prototype.createEnrollment = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/CreateEnrollment', this.hostname_).toString(), request, metadata || {}, this.methodInfoCreateEnrollment, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/CreateEnrollment', request, metadata || {}, this.methodInfoCreateEnrollment);\n    };\n    AutograderServiceClient.prototype.updateEnrollment = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/UpdateEnrollment', this.hostname_).toString(), request, metadata || {}, this.methodInfoUpdateEnrollment, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/UpdateEnrollment', request, metadata || {}, this.methodInfoUpdateEnrollment);\n    };\n    AutograderServiceClient.prototype.updateEnrollments = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/UpdateEnrollments', this.hostname_).toString(), request, metadata || {}, this.methodInfoUpdateEnrollments, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/UpdateEnrollments', request, metadata || {}, this.methodInfoUpdateEnrollments);\n    };\n    AutograderServiceClient.prototype.getSubmissions = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetSubmissions', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetSubmissions, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetSubmissions', request, metadata || {}, this.methodInfoGetSubmissions);\n    };\n    AutograderServiceClient.prototype.getSubmissionsByCourse = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetSubmissionsByCourse', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetSubmissionsByCourse, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetSubmissionsByCourse', request, metadata || {}, this.methodInfoGetSubmissionsByCourse);\n    };\n    AutograderServiceClient.prototype.updateSubmission = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/UpdateSubmission', this.hostname_).toString(), request, metadata || {}, this.methodInfoUpdateSubmission, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/UpdateSubmission', request, metadata || {}, this.methodInfoUpdateSubmission);\n    };\n    AutograderServiceClient.prototype.updateSubmissions = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/UpdateSubmissions', this.hostname_).toString(), request, metadata || {}, this.methodInfoUpdateSubmissions, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/UpdateSubmissions', request, metadata || {}, this.methodInfoUpdateSubmissions);\n    };\n    AutograderServiceClient.prototype.rebuildSubmission = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/RebuildSubmission', this.hostname_).toString(), request, metadata || {}, this.methodInfoRebuildSubmission, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/RebuildSubmission', request, metadata || {}, this.methodInfoRebuildSubmission);\n    };\n    AutograderServiceClient.prototype.createBenchmark = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/CreateBenchmark', this.hostname_).toString(), request, metadata || {}, this.methodInfoCreateBenchmark, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/CreateBenchmark', request, metadata || {}, this.methodInfoCreateBenchmark);\n    };\n    AutograderServiceClient.prototype.updateBenchmark = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/UpdateBenchmark', this.hostname_).toString(), request, metadata || {}, this.methodInfoUpdateBenchmark, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/UpdateBenchmark', request, metadata || {}, this.methodInfoUpdateBenchmark);\n    };\n    AutograderServiceClient.prototype.deleteBenchmark = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/DeleteBenchmark', this.hostname_).toString(), request, metadata || {}, this.methodInfoDeleteBenchmark, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/DeleteBenchmark', request, metadata || {}, this.methodInfoDeleteBenchmark);\n    };\n    AutograderServiceClient.prototype.createCriterion = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/CreateCriterion', this.hostname_).toString(), request, metadata || {}, this.methodInfoCreateCriterion, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/CreateCriterion', request, metadata || {}, this.methodInfoCreateCriterion);\n    };\n    AutograderServiceClient.prototype.updateCriterion = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/UpdateCriterion', this.hostname_).toString(), request, metadata || {}, this.methodInfoUpdateCriterion, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/UpdateCriterion', request, metadata || {}, this.methodInfoUpdateCriterion);\n    };\n    AutograderServiceClient.prototype.deleteCriterion = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/DeleteCriterion', this.hostname_).toString(), request, metadata || {}, this.methodInfoDeleteCriterion, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/DeleteCriterion', request, metadata || {}, this.methodInfoDeleteCriterion);\n    };\n    AutograderServiceClient.prototype.createReview = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/CreateReview', this.hostname_).toString(), request, metadata || {}, this.methodInfoCreateReview, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/CreateReview', request, metadata || {}, this.methodInfoCreateReview);\n    };\n    AutograderServiceClient.prototype.updateReview = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/UpdateReview', this.hostname_).toString(), request, metadata || {}, this.methodInfoUpdateReview, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/UpdateReview', request, metadata || {}, this.methodInfoUpdateReview);\n    };\n    AutograderServiceClient.prototype.getReviewers = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetReviewers', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetReviewers, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetReviewers', request, metadata || {}, this.methodInfoGetReviewers);\n    };\n    AutograderServiceClient.prototype.loadCriteria = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/LoadCriteria', this.hostname_).toString(), request, metadata || {}, this.methodInfoLoadCriteria, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/LoadCriteria', request, metadata || {}, this.methodInfoLoadCriteria);\n    };\n    AutograderServiceClient.prototype.getProviders = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetProviders', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetProviders, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetProviders', request, metadata || {}, this.methodInfoGetProviders);\n    };\n    AutograderServiceClient.prototype.getOrganization = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetOrganization', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetOrganization, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetOrganization', request, metadata || {}, this.methodInfoGetOrganization);\n    };\n    AutograderServiceClient.prototype.getRepositories = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/GetRepositories', this.hostname_).toString(), request, metadata || {}, this.methodInfoGetRepositories, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/GetRepositories', request, metadata || {}, this.methodInfoGetRepositories);\n    };\n    AutograderServiceClient.prototype.isEmptyRepo = function (request, metadata, callback) {\n        if (callback !== undefined) {\n            return this.client_.rpcCall(new URL('/AutograderService/IsEmptyRepo', this.hostname_).toString(), request, metadata || {}, this.methodInfoIsEmptyRepo, callback);\n        }\n        return this.client_.unaryCall(this.hostname_ +\n            '/AutograderService/IsEmptyRepo', request, metadata || {}, this.methodInfoIsEmptyRepo);\n    };\n    return AutograderServiceClient;\n}());\nexports.AutograderServiceClient = AutograderServiceClient;\n","/home/jostein/dev/quickfeed/public/src/proto/ag_pb.js",[],{"ruleId":"95","severity":1,"message":"96","line":2,"column":8,"nodeType":"97","messageId":"98","endLine":2,"endColumn":16},{"ruleId":"95","severity":1,"message":"99","line":8,"column":18,"nodeType":"97","messageId":"98","endLine":8,"endColumn":29},{"ruleId":"95","severity":1,"message":"100","line":1,"column":17,"nodeType":"97","messageId":"98","endLine":1,"endColumn":26},{"ruleId":"101","severity":1,"message":"102","line":21,"column":8,"nodeType":"103","endLine":21,"endColumn":31,"suggestions":"104"},{"ruleId":"95","severity":1,"message":"105","line":24,"column":13,"nodeType":"97","messageId":"98","endLine":24,"endColumn":18},{"ruleId":"95","severity":1,"message":"106","line":24,"column":29,"nodeType":"97","messageId":"98","endLine":24,"endColumn":36},{"ruleId":"95","severity":1,"message":"107","line":24,"column":38,"nodeType":"97","messageId":"98","endLine":24,"endColumn":46},{"ruleId":"108","severity":1,"message":"109","line":25,"column":18,"nodeType":"110","messageId":"111","endLine":25,"endColumn":20},{"ruleId":"95","severity":1,"message":"112","line":1,"column":16,"nodeType":"97","messageId":"98","endLine":1,"endColumn":27},{"ruleId":"95","severity":1,"message":"113","line":1,"column":29,"nodeType":"97","messageId":"98","endLine":1,"endColumn":37},{"ruleId":"114","severity":1,"message":"115","line":15,"column":13,"nodeType":"116","endLine":15,"endColumn":56},{"ruleId":"101","severity":1,"message":"102","line":21,"column":8,"nodeType":"103","endLine":21,"endColumn":10,"suggestions":"117"},{"ruleId":"108","severity":1,"message":"109","line":23,"column":23,"nodeType":"110","messageId":"111","endLine":23,"endColumn":25},{"ruleId":"114","severity":1,"message":"115","line":35,"column":13,"nodeType":"116","endLine":35,"endColumn":64},{"ruleId":"108","severity":1,"message":"109","line":38,"column":28,"nodeType":"110","messageId":"111","endLine":38,"endColumn":30},{"ruleId":"95","severity":1,"message":"118","line":1,"column":10,"nodeType":"97","messageId":"98","endLine":1,"endColumn":17},{"ruleId":"95","severity":1,"message":"119","line":3,"column":10,"nodeType":"97","messageId":"98","endLine":3,"endColumn":14},{"ruleId":"95","severity":1,"message":"120","line":4,"column":10,"nodeType":"97","messageId":"98","endLine":4,"endColumn":20},{"ruleId":"108","severity":1,"message":"109","line":44,"column":21,"nodeType":"110","messageId":"111","endLine":44,"endColumn":23},{"ruleId":"108","severity":1,"message":"121","line":56,"column":37,"nodeType":"110","messageId":"111","endLine":56,"endColumn":39},{"ruleId":"95","severity":1,"message":"122","line":1,"column":10,"nodeType":"97","messageId":"98","endLine":1,"endColumn":18},{"ruleId":"95","severity":1,"message":"123","line":3,"column":10,"nodeType":"97","messageId":"98","endLine":3,"endColumn":24},{"ruleId":"95","severity":1,"message":"118","line":1,"column":10,"nodeType":"97","messageId":"98","endLine":1,"endColumn":17},{"ruleId":"95","severity":1,"message":"124","line":2,"column":9,"nodeType":"97","messageId":"98","endLine":2,"endColumn":13},{"ruleId":"95","severity":1,"message":"125","line":2,"column":29,"nodeType":"97","messageId":"98","endLine":2,"endColumn":34},{"ruleId":"95","severity":1,"message":"126","line":6,"column":22,"nodeType":"97","messageId":"98","endLine":6,"endColumn":27},{"ruleId":"95","severity":1,"message":"127","line":7,"column":13,"nodeType":"97","messageId":"98","endLine":7,"endColumn":20},{"ruleId":"95","severity":1,"message":"100","line":1,"column":17,"nodeType":"97","messageId":"98","endLine":1,"endColumn":26},{"ruleId":"95","severity":1,"message":"125","line":3,"column":9,"nodeType":"97","messageId":"98","endLine":3,"endColumn":14},{"ruleId":"108","severity":1,"message":"121","line":28,"column":27,"nodeType":"110","messageId":"111","endLine":28,"endColumn":29},{"ruleId":"101","severity":1,"message":"128","line":30,"column":8,"nodeType":"103","endLine":30,"endColumn":26,"suggestions":"129"},{"ruleId":"108","severity":1,"message":"109","line":43,"column":25,"nodeType":"110","messageId":"111","endLine":43,"endColumn":27},{"ruleId":"130","severity":1,"message":"131","line":1,"column":1,"nodeType":"132","messageId":"133","endLine":1,"endColumn":14,"fix":"134"},"@typescript-eslint/no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'useOvermind' is defined but never used.","'Component' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'actions'. Either include it or remove the dependency array.","ArrayExpression",["135"],"'state' is assigned a value but never used.","'effects' is assigned a value but never used.","'reaction' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useCallback' is defined but never used.","'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["136"],"'Context' is defined but never used.","'User' is defined but never used.","'useEffects' is defined but never used.","Expected '!==' and instead saw '!='.","'userInfo' is defined but never used.","'isMetaProperty' is defined but never used.","'Todo' is defined but never used.","'state' is defined but never used.","'Users' is defined but never used.","'grpcWeb' is defined but never used.","React Hook useCallback has missing dependencies: 'actions', 'todo.completed', and 'todo.id'. Either include them or remove the dependency array.",["137"],"strict","'use strict' is unnecessary inside of modules.","ExpressionStatement","module",{"range":"138","text":"139"},{"desc":"140","fix":"141"},{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},[0,13],"","Update the dependencies array to be: [actions, loggedIn, setLoggedIn]",{"range":"146","text":"147"},"Update the dependencies array to be: [actions]",{"range":"148","text":"149"},"Update the dependencies array to be: [actions, todo.completed, todo.id]",{"range":"150","text":"151"},[824,847],"[actions, loggedIn, setLoggedIn]",[495,497],"[actions]",[665,683],"[actions, todo.completed, todo.id]"]